# This configuration file stores the definitions of low level commands for the 
# backplane and target modules, as well as high-level sequences of those
# commands corresponding that can be given as commands from the interface.
# The run control (server) program parses this file on startup.

# List commands one per line within lines containing only "BEGIN DEFINITIONS"
# and "END DEFINITIONS".
# Command definitions have the following structure:
# <COMMAND_DEVICE> command_name num_ints num_floats num_strings
# Each word of the command definition must be separated by a single space.

# Each high level command sequence begins with a line containing only
# "BEGIN SEQUENCE", followed by a line containing the name of the command, then
# lines listing each of the commands, and ending with a line containing only
# "END SEQUENCE".

# Commands have the following structure:
# <COMMAND_DEVICE> command_name [CHK priority] [<INPUT_TYPE> value]*
# Each word of the command must be separated by a single space.

# Command devices:
# RC: Run Control (run directly by server program)
# TM: Target Module (sent to TM controller program)
# PI: Backplane (sent to Raspberry Pi program)

# The optional CHK parameter determines when the server will move on to the next
# command.
# CHK 0: move on to the next command immediately
# CHK 1: wait for confirmation before sending another command to same device
# CHK 2: wait for confirmation before sending another command to any device

# Input types:
# INT: unsigned integer
# FLT: float
# STR: string (cannot include spaces)

# Mark comments using '#'; leading and trailing whitespace on lines is ignored.

# List of available low level commands
BEGIN DEFINITIONS

PI power_control_modules 2 0 0 # power on/off 32 modules specified bitwise ('n')
# TODO: split power_control_modules into discrete commands as follows
#PI power_on_module 1 0 0 # power on module (0-31) ('n')
#PI power_off_module 1 0 0 # power off module (0-31) ('n')
#PI power_off_all_modules 0 0 0 # power off all modules ('n')
PI reset_dacq1_power 0 0 0 # reset DACQ1 power ('1')
PI reset_dacq2_power 0 0 0 # reset DACQ2 power ('2')

# set holdoff time in increments of 4 nanoseconds (0-65500) ('o')
PI set_holdoff_time 1 0 0
# set TACK type (0-3) and TACK mode (0-3) ('z')
PI set_tack_type_and_mode 2 0 0
# set trigger at time in ns (64 bits; split into four 16 bit uints) ('d')
PI set_trigger 4 0 0

PI set_trigger_mask 0 0 0 # load the trigger mask from a default file ('j')
# TODO: split trigger mask into loading from file or loading hardcoded defaults
# such as all triggers closed
## load a trigger mask from the specified file ('j')
#PI set_trigger_mask_from_file 0 0 1
## set trigger mask to close all triggers ('j')
#PI close_trigger_mask 0 0 0

# reset trigger counter and timer ('l')
PI reset_trigger_counter_and_timer 0 0 0

# enable or disable trigger/TACK ('g'); set each int to 0 or 1:
# Phase A logic, Phase B logic, Phase C logic, Phase D logic,
# External Trigger, TACK messages to TMs 0-15, TACK messages to TMs 16-31
PI toggle_trigger_tack 7 0 0

PI sync 0 0 0 # send sync command ('s')

PI read_modules_present 0 0 0 # read whether modules are present ('p')
PI read_module_currents 0 0 0 # read FEE currents in amps ('i')
PI read_module_voltages 0 0 0 # read FEE voltages in volts ('v')

# read the timer value in ns and get the trigger rate ('c')
PI read_timer_and_trigger_rate 0 0 0

END DEFINITIONS

BEGIN SEQUENCE
testing
PI read_modules_present CHK 1 
PI set_holdoff_time INT 500
END SEQUENCE

## Power on all modules, one at a time
#BEGIN SEQUENCE
#power_on_all_modules
#PI power_on_module CHK 2 INT 11
#RC sleep INT 800
#PI power_on_module CHK 2 INT 12
#PI power_on_module CHK 2 INT 13
#PI power_on_module CHK 2 INT 14
#PI power_on_module CHK 2 INT 17
#PI power_on_module CHK 2 INT 18
#PI power_on_module CHK 2 INT 19
#PI power_on_module CHK 2 INT 20
#PI power_on_module CHK 2 INT 23
#PI power_on_module CHK 2 INT 24
#PI power_on_module CHK 2 INT 25
#PI power_on_module CHK 2 INT 26
#PI power_on_module CHK 2 INT 28
#PI power_on_module CHK 2 INT 29
#PI power_on_module CHK 2 INT 30
#PI power_on_module CHK 2 INT 31
#END SEQUENCE
#
## Perform an emergency stop
## cancel all pending commands and power off all modules
#BEGIN SEQUENCE
#stop
#RC cancel_pending_commands
#PI power_off_all_modules CHK 2
#END SEQUENCE
